{
  "manifest_version": "1.1",
  "project": "adk_forge",
  "description": "Manifesto de automação para geração, teste e deploy do sistema ADK-Forge. O schema é normalizado e pronto para ser processado por ferramentas de CI/CD e execução de tarefas.",
  "globals": {
    "language": "python",
    "runtime": "Python 3.11",
    "base_package": "adk_forge"
  },
  "tasks": [
    {
      "id": "1",
      "title": "Configuração do ambiente e esqueleto do projeto",
      "kind": "meta",
      "priority": "high",
      "status": "todo",
      "dependencies": [],
      "details": "Instalar dependências, criar requirements.txt e o esqueleto de diretórios do projeto.",
      "testStrategy": "pip list | grep -E 'google-adk|google-cloud-aiplatform' && test -d adk_forge/agents"
    },
    {
      "id": "2",
      "title": "Ferramentas de I/O seguras (file_tools.py)",
      "kind": "file",
      "path": "adk_forge/tools/file_tools.py",
      "priority": "high",
      "status": "todo",
      "dependencies": ["1"],
      "details": "Implementar as funções `create_directory`, `write_file`, e `read_file` usando `ToolContext` e validação de segurança contra path traversal.",
      "testStrategy": "python -m py_compile adk_forge/tools/file_tools.py"
    },
    {
      "id": "3",
      "title": "Implementação do OrchestratorAgent",
      "kind": "file",
      "path": "adk_forge/agents/orchestrator.py",
      "priority": "medium",
      "status": "todo",
      "dependencies": ["1"],
      "details": "Implementar a classe `OrchestratorAgent` para validar a entrada do usuário e inicializar o sandbox da sessão.",
      "testStrategy": "python -m py_compile adk_forge/agents/orchestrator.py"
    },
    {
      "id": "4",
      "title": "Implementação do SystemsArchitectAgent",
      "kind": "file",
      "path": "adk_forge/agents/architect.py",
      "priority": "medium",
      "status": "todo",
      "dependencies": ["3"],
      "details": "Implementar a classe `SystemsArchitectAgent` com a instrução para gerar o plano de arquitetura em JSON, conforme o formato obrigatório do tutorial.",
      "testStrategy": "python -m py_compile adk_forge/agents/architect.py"
    },
    {
      "id": "5",
      "title": "Implementação do DeveloperAgent",
      "kind": "file",
      "path": "adk_forge/agents/developer.py",
      "priority": "medium",
      "status": "todo",
      "dependencies": ["2", "4"],
      "details": "Implementar a classe `DeveloperAgent` com a instrução para converter o plano JSON em código Python, seguindo o processo de implementação detalhado.",
      "testStrategy": "python -m py_compile adk_forge/agents/developer.py"
    },
    {
      "id": "6",
      "title": "Implementação do ReviewerAgent",
      "kind": "file",
      "path": "adk_forge/agents/reviewer.py",
      "priority": "medium",
      "status": "todo",
      "dependencies": ["2", "5"],
      "details": "Implementar a classe `ReviewerAgent` com a instrução para revisar o código gerado e produzir um relatório em Markdown.",
      "testStrategy": "python -m py_compile adk_forge/agents/reviewer.py"
    },
    {
      "id": "7",
      "title": "Montagem do ADKForgeGenerationPipeline",
      "kind": "file",
      "path": "adk_forge/agents/__init__.py",
      "priority": "high",
      "status": "todo",
      "dependencies": ["4", "5", "6"],
      "details": "Implementar o `SequentialAgent` que agrega os agentes de arquitetura, desenvolvimento e revisão. IMPORTANTE: Usar o parâmetro `sub_agents`.",
      "testStrategy": "python -c \"from adk_forge.agents import ADKForgeGenerationPipeline; assert len(ADKForgeGenerationPipeline().sub_agents) == 3\""
    },
    {
      "id": "8",
      "title": "Sistema principal e Runner CLI",
      "kind": "meta",
      "priority": "high",
      "status": "todo",
      "dependencies": ["3", "7"],
      "details": "Criar os arquivos que unem o sistema (`agent.py`, `__init__.py`) e fornecem um runner CLI para execução (`main.py`)."
    },
    {
      "id": "9",
      "title": "Teste de Validação Automatizado",
      "kind": "file",
      "path": "test_forge.py",
      "priority": "medium",
      "status": "todo",
      "dependencies": ["8"],
      "details": "Criar um script de teste que executa o fluxo de geração de ponta a ponta de forma automatizada usando `asyncio` e `ADKForgeRunner`.",
      "testStrategy": "python test_forge.py | grep 'Teste passou'"
    },
    {
      "id": "10",
      "title": "Artefatos de Deploy (Dockerfile)",
      "kind": "file",
      "path": "Dockerfile",
      "priority": "low",
      "status": "todo",
      "dependencies": ["1", "8"],
      "details": "Criar um Dockerfile para empacotar a aplicação para deploy, seguindo as melhores práticas para aplicações ADK.",
      "testStrategy": "docker build -t adk-forge:test ."
    },
    {
      "id": "11",
      "title": "Documentação de Troubleshooting",
      "kind": "file",
      "path": "docs/troubleshooting.md",
      "priority": "low",
      "status": "todo",
      "dependencies": [],
      "details": "Criar um arquivo Markdown descrevendo erros comuns e suas soluções para referência rápida.",
      "testStrategy": "test -s docs/troubleshooting.md"
    }
  ],
  "tests": [
    {
      "id": "integration_check_root_agent",
      "title": "Verifica se o root_agent é importável",
      "details": "Este é o teste de integração mais crítico. Se falhar, significa que a montagem final do projeto está quebrada.",
      "cmd": "python -c \"from adk_forge import root_agent; print('✅ root_agent importado com sucesso!')\""
    },
    {
      "id": "full_test_suite",
      "title": "Executa a suíte de testes completa",
      "details": "Assume que os testes estão configurados para serem executados com um comando pytest.",
      "cmd": "pytest"
    }
  ],
  "metadata": {
    "generatedAt": "2024-05-21T12:00:00Z",
    "source": "tutorial_completo.md",
    "version": "1.1-automation-ready"
  }
}
